package rfc2812

type Grammar Peg {}

# IRC client protocol message according to RFC2812 2.3.1.

# message    =  [ ":" prefix SPACE ] command [ params ] crlf
message <- (':' prefix SPACE)? command params? crlf
# prefix     =  servername / ( nickname [ [ "!" user ] "@" host ] )
prefix <- servername / (nickname (('!' user)? '@' host)?)?
# command    =  1*letter / 3digit
command <- letter+ / digit digit digit
# params     =  *14( SPACE middle ) [ SPACE ":" trailing ]
#            =/ 14( SPACE middle ) [ SPACE [ ":" ] trailing ]
#
# XXX: Slightly diverge from spec since peg won't count.
params <- (SPACE middle)* (SPACE ':' trailing)?

# XXX: rules are inefficient in a packrat parser, but map closely to
# RFC have the closest thing to a specification.

# nospcrlfcl =  %x01-09 / %x0B-0C / %x0E-1F / %x21-39 / %x3B-FF 
#               ; any octet except NUL, CR, LF, " " and ":"
nospcrlfcl <- ![\0\r\n :] .
# middle     =  nospcrlfcl *( ":" / nospcrlfcl )
middle <- nospcrlfcl ( ":" / nospcrlfcl )*
# trailing   =  *( ":" / " " / nospcrlfcl )
trailing <- ([: ] / nospcrlfcl)*
# SPACE      =  %x20        ; space character
SPACE <- ' '
# crlf       =  %x0D %x0A   ; "carriage return" "linefeed"
crlf <- '\r\n'

# target     =  nickname / server
# XXX: I think this is supposed to be servername, not server?
target <- nickname / servername
# msgtarget  =  msgto *( "," msgto )
msgtarget <- msgto (',' msgto)*
# msgto      =  channel / ( user [ "%" host ] "@" servername )
# msgto      =/ ( user "%" host ) / targetmask
# msgto      =/ nickname / ( nickname "!" user "@" host )
msgto <- channel / user ('%' host)? '@' servername
	/ user '%' host / targetmask
	/ nickname / nickname '!' user '@' host
# channel    =  ( "#" / "+" / ( "!" channelid ) / "&" ) chanstring
#               [ ":" chanstring ]
channel <- ( "#" / "+" / ( "!" channelid ) / "&" ) chanstring (":" chanstring)?
# servername =  hostname
servername <- hostname
# host       =  hostname / hostaddr
host <- hostname / hostaddr
# hostname   =  shortname *( "." shortname )
hostname <- shortname ('.' shortname)*
# shortname  =  ( letter / digit ) *( letter / digit / "-" )
#               *( letter / digit )
#                 ; as specified in RFC 1123 [HNAME]
shortname <- (letter / digit) (letter/digit/'-')* (letter/digit)*
# hostaddr   =  ip4addr / ip6addr
hostaddr <- ip4addr / ip6addr
# ip4addr    =  1*3digit "." 1*3digit "." 1*3digit "." 1*3digit
ip4addr <- digit3 '.' digit3 '.' digit3 '.' digit3
digit3 <- digit digit? digit?
# ip6addr    =  1*hexdigit 7( ":" 1*hexdigit )
# ip6addr    =/ "0:0:0:0:0:" ( "0" / "FFFF" ) ":" ip4addr
ip6addr <- hexdigit+ ip6tail ip6tail ip6tail ip6tail ip6tail ip6tail ip6tail
	/ '0:0:0:0:0:' ('0'/'FFFF') ':' ip4addr
ip6tail <- ':' hexdigit+

# nickname   =  ( letter / special ) *8( letter / digit / special / "-" )
# XXX: Slightly diverging from spec since peg won't count.
nickname <- (letter / special) (letter / digit / special / '-')*
# targetmask =  ( "$" / "#" ) mask
#                 ; see details on allowed masks in section 3.3.1
targetmask <- [$#] mask
# chanstring =  %x01-07 / %x08-09 / %x0B-0C / %x0E-1F / %x21-2B
# chanstring =/ %x2D-39 / %x3B-FF
#                 ; any octet except NUL, BELL, CR, LF, " ", "," and ":"
chanstring <- ![\0\b\r\n ,:] .
# channelid  = 5( %x41-5A / digit )   ; 5( A-Z / 0-9 )
channelid <- [A-Z0-9] [A-Z0-9] [A-Z0-9] [A-Z0-9] [A-Z0-9]

#  Other parameter syntaxes are:
# user       =  1*( %x01-09 / %x0B-0C / %x0E-1F / %x21-3F / %x41-FF )
#                 ; any octet except NUL, CR, LF, " " and "@"
user <- (![\0\r\n @].)+

# key        =  1*23( %x01-05 / %x07-08 / %x0C / %x0E-1F / %x21-7F )
#                 ; any 7-bit US_ASCII character,
#                 ; except NUL, CR, LF, FF, h/v TABs, and " "
# XXX diverging due to counting
key <- (![\0\r\n\0xff\t\v ] .)+

# letter     =  %x41-5A / %x61-7A       ; A-Z / a-z
letter <- [A-Za-z]
# digit      =  %x30-39                 ; 0-9
digit <- [0-9]

# hexdigit   =  digit / "A" / "B" / "C" / "D" / "E" / "F"
hexdigit <- [0-9A-F]
# special    =  %x5B-60 / %x7B-7D
#                  ; "[", "]", "\", "`", "_", "^", "{", "|", "}"
special <- '['/']'/'\\'/'`'/'_'/'^'/'{'/'}'/'|'/'}'

# allowed masks, section 3.3.1
# The mask MUST
# have at least 1 (one) "." in it and no wildcards following the last
# ".".  This requirement exists to prevent people sending messages to
# "#*" or "$*", which would broadcast to all users.  Wildcards are the
# '*' and '?'  characters. 
# I translated that into:
# mask <- (![. ].)* ('.' (![*? ] .))
#
# But the actual BNF is at section 2.5. Unlike 3.3.1, it accepts "".
#   mask       =  *( nowild / noesc wildone / noesc wildmany )
mask <- (nowild / noesc wildone / noesc wildmany)*
#   wildone    =  %x3F
wildone <- '?'
#   wildmany   =  %x2A
wildmany <- '*'
#   nowild     =  %x01-29 / %x2B-3E / %x40-FF
#                   ; any octet except NUL, "*", "?"
nowild <- ![\0*?] .
#   noesc      =  %x01-5B / %x5D-FF
#                   ; any octet except NUL and "\"
noesc <- ![\0\\] .
#   matchone   =  %x01-FF
#                   ; matches wildone
matchone <- ![\0] .
#   matchmany  =  *matchone
#                   ; matches wildmany
matchmany <- matchone*

